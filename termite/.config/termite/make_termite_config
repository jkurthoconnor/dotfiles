#!/usr/bin/env ruby

require 'erb'
require 'open3'
require 'fileutils'

class TermiteConfig
  attr_reader :params, :template

  def initialize
    @template = File.read('termite_config.erb')
    @params = set_params
  end

  def render_config
    renderer = ERB.new(template)
    renderer.result(binding)
  end

  private
  def set_params
    { colors: xresources,
      hostname: host,
      files: sources,
      vimmeta: "# vim: filetype=dosini cms=#%s" }
  end

  def xresources
    Open3.capture2("xrdb -query").first
         .gsub(/[*\t]/, '')
         .split
         .map { |color| color.split(/:/) }
         .map { |pair| [pair[0].to_sym, pair[1]] }
         .to_h
  end

  def host
    Open3.capture2("hostname").first.chomp
  end

  def sources
    erb = File.expand_path("./termite_config.erb")
    rb = File.expand_path(__FILE__)
    { template: erb, script: rb }
  end
end


class FileManager
  attr_reader :config_path

  def initialize(rendered_template)
    @rendered_template = rendered_template
    @home = Dir.home
    @path_suffix = ".config/termite/config"
    @dots_prefix = ".dotfiles/termite"
    @config_path = File.join(@home, @path_suffix)
  end

  def install_config
    create_config_old
    write_config
  end

  private
  def create_config_old
    time = Time.now.strftime("%Y%m%dT%H%M")
    config_archive = File.join(@home, ".config/previous-configs")

    if File.exist?(config_path)
      FileUtils.mkdir("#{config_archive}") unless Dir.exist?(config_archive)
      FileUtils.cp("#{config_path}", "#{config_archive}/termite-config-prev-#{time}")
    end
  end

  def write_config
    if File.exist?(config_path)
      destination = config_path
    else
      # `.dotfiles` destination to allow use when 'unstowed'
      destination = File.join(@home, @dots_prefix, @path_suffix)
    end

    File.open(destination, "w+", 0644) do |f|
      f.write(@rendered_template) # ensure using block auto closes
    end
  end
end


config = TermiteConfig.new
file_data = config.render_config

manager = FileManager.new(file_data)
manager.install_config
